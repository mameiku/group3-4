@startuml AddToCartSequenceDiagram_LoggedOut
!theme toy

' ====================================================================
' Participant Definitions (Using .jsp and .java notation)
' ====================================================================
actor User as "顧客"
boundary ProductDetailJSP as "ProductDetail.jsp"
control AddToCartJSP as "AddToCart.jsp"
control CustomerServiceJava as "CustomerService.java"
boundary LoginJSP as "Login.jsp"
control ProductServiceJava as "ProductService.java"
control CartServiceJava as "CartService.java"
boundary CartCompleteJSP as "CartComplete.jsp"
boundary ErrorJSP as "Error.jsp"

' ====================================================================
' Basic Flow: User is logged out (基本フロー: ログアウト状態)
' ====================================================================

' 1. 顧客は、商品詳細画面で数量を指定し、「カートに追加」を選択する
User -> ProductDetailJSP : 1. 「カートに追加」を選択 (商品ID, 数量)
activate ProductDetailJSP

ProductDetailJSP -> AddToCartJSP : カート追加リクエスト (商品ID, 数量)
deactivate ProductDetailJSP
activate AddToCartJSP

' --- ログインチェック ---
' 2. システムは顧客がログインしているかを確認する。
AddToCartJSP -> CustomerServiceJava : ログイン情報を取得()
activate CustomerServiceJava
CustomerServiceJava --> AddToCartJSP : ログイン情報 (未ログインユーザー / Null)
deactivate CustomerServiceJava

alt [未ログイン]
    ' 代替フロー 2-1: 顧客がログインしていない場合、システムはそれを確認する。
    ' 代替フロー 2-2: システムはログイン画面へリダイレクトする。
    AddToCartJSP -> LoginJSP : ログイン画面へリダイレクト
    activate LoginJSP
    
    LoginJSP --> User : ログイン画面を表示
    
    Note right : ユーザーはここで「ログイン」ユースケースを実行する。\nログイン成功後、カート/商品ページへリダイレクトされる。
    
    deactivate LoginJSP
    
else [ログイン済み（フォールバック）]
    ' このパスは、本来の基本フロー（ログイン済み）を表すが、事前条件が「ログアウト」のため通常は発生しない。
    
    ' 2. 在庫チェック
    AddToCartJSP -> ProductServiceJava : 在庫チェック (商品ID, 数量)
    activate ProductServiceJava
    ProductServiceJava --> AddToCartJSP : 在庫情報
    deactivate ProductServiceJava
    
    ' ... カート追加の残りのロジックが続く ...
    
end ' ログインチェック alt を閉じる

deactivate AddToCartJSP

@enduml
