@startuml .
!theme toy

actor 顧客
participant "商品詳細画面\n: Boundary" as Boundary_ProductDetail
participant "カート制御\n: Control" as Control_Cart
database "商品データ\n: Entity" as Entity_Product
database "カート\n: Entity" as Entity_Cart

' 1. カートに追加操作
顧客 -> Boundary_ProductDetail : 1. 数量を指定し[カートに入れる]を選択
activate Boundary_ProductDetail

' 2. カート制御へ要求
Boundary_ProductDetail -> Control_Cart : 2. 商品追加要求(商品ID, 数量)
deactivate Boundary_ProductDetail
activate Control_Cart

' 3. 在庫確認（在庫管理を省略し、商品データに直接確認）
Control_Cart -> Entity_Product : 3. 在庫数参照(商品ID)
activate Entity_Product
Entity_Product --> Control_Cart : 3.1. 在庫数返却
deactivate Entity_Product

alt 在庫あり
    ' 4. カート情報更新
    Control_Cart -> Entity_Cart : 4. 商品と数量を追加/更新
    activate Entity_Cart
    Entity_Cart --> Control_Cart : 4.1. 追加完了
    deactivate Entity_Cart

    ' 5. 完了通知
    Control_Cart --> Boundary_ProductDetail : 5. 追加完了通知
    deactivate Control_Cart
    activate Boundary_ProductDetail
    Boundary_ProductDetail -> 顧客 : 6. 「追加完了」メッセージを表示
else 在庫なし (代替フロー)
    ' 7. エラー通知
    Control_Cart --> Boundary_ProductDetail : 7. 在庫不足エラー通知
    deactivate Control_Cart
    activate Boundary_ProductDetail
    Boundary_ProductDetail -> 顧客 : 8. 「在庫が不足しています」メッセージを表示
end

deactivate Boundary_ProductDetail
@enduml