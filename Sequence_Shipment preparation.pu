@startuml ShippingPreparationSequenceDiagram
!theme toy

' ====================================================================
' Participant Definitions (Using .jsp and .java notation)
' ====================================================================
actor LogisticsStaff as "Logistics Staff"
boundary ShippingListJSP as "ShippingList.jsp"
boundary ShippingInstructionJSP as "ShippingInstruction.jsp"
control ShippingProcessorJava as "ShippingProcessor.java"
control InventoryManagerJava as "InventoryManager.java"
participant ShippingDBJava as "ShippingDB.java" 
control MailServiceJava as "MailService.java"

' ====================================================================
' Basic Flow
' ====================================================================

' 1. Logistics staff navigates from the management screen to the "Shipping Waitlist".
LogisticsStaff -> ShippingListJSP : 1. Navigate to Shipping Waitlist
activate ShippingListJSP

' 2. The system selects an order awaiting shipment and displays "Shipping Instructions".
ShippingListJSP -> ShippingInstructionJSP : Display Instruction Request (Order Data)
deactivate ShippingListJSP
activate ShippingInstructionJSP

ShippingInstructionJSP --> LogisticsStaff : 2. Display Shipping Instructions()

' 3. The system executes the shipping process based on the order and creates a picking list.
ShippingInstructionJSP -> ShippingProcessorJava : 3. Execute Shipping Process (Order Data)
activate ShippingProcessorJava

ShippingProcessorJava -> InventoryManagerJava : 3. Request Picking List
activate InventoryManagerJava
InventoryManagerJava --> ShippingProcessorJava : Picking List

' 4. The actor gathers physical goods from the warehouse based on the picking list.
Note over LogisticsStaff, ShippingProcessorJava : 4. Gather physical goods based on picking list

' 5. The actor inspects and packs the goods.
Note over LogisticsStaff : 5. Perform inspection and packaging

' 6. The actor issues the shipping slip and enters the tracking number into the system.
LogisticsStaff -> ShippingInstructionJSP : 6. Enter Tracking Number
ShippingInstructionJSP -> ShippingProcessorJava : Register Tracking Number()

' --- Alternative Flow 1: Cannot ship due to insufficient stock (Fork at Basic Flow 3) ---
alt [Insufficient Stock]
    ' Basic Flow 3. System checks stock.
    ShippingProcessorJava -> InventoryManagerJava : Check Stock()
    InventoryManagerJava --> ShippingProcessorJava : Stock Info (Insufficient)
    
    ' Alt 1-1. System detects insufficient stock during processing.
    ShippingProcessorJava -> ShippingInstructionJSP : Insufficient Stock Error Display
    
    ' Alt 1-2. System updates the order status to "Insufficient Stock".
    ShippingProcessorJava -> ShippingDBJava : Update Order Status ("Insufficient Stock")
    activate ShippingDBJava
    ShippingDBJava --> ShippingProcessorJava : Update Complete
    deactivate ShippingDBJava

    ' Alt 1-3. Display warning message to the actor.
    ShippingInstructionJSP --> LogisticsStaff : Insufficient Stock Warning

    deactivate InventoryManagerJava
    deactivate ShippingProcessorJava
    deactivate ShippingInstructionJSP

else [Stock Sufficient and Proceeding to Alt 2 Check]
' --- Alternative Flow 2: Invalid format for tracking number (Fork at Basic Flow 6) ---
alt [Invalid Tracking Number]
    ShippingProcessorJava -> ShippingInstructionJSP : Validate Tracking Number()
    ShippingInstructionJSP -> ShippingProcessorJava : Validation Result (Invalid)

    ' Alt 2-1. System displays an error message.
    ShippingProcessorJava -> ShippingInstructionJSP : Error Message Display ("Invalid tracking number format")
    deactivate ShippingProcessorJava
    ShippingInstructionJSP --> LogisticsStaff : Invalid Tracking Number Error
    
    Note over LogisticsStaff : Staff confirms/enters correct tracking number and\nclicks "Shipment Complete" again (Returns to Basic Flow)
    deactivate ShippingInstructionJSP
    
else [No Issues]
    ' 7. The actor selects the "Shipment Complete" button.
    LogisticsStaff -> ShippingInstructionJSP : 7. Select "Shipment Complete"
    ShippingInstructionJSP -> ShippingProcessorJava : Finalize Order (Tracking Number)
    
    ' 8. The system updates the order status to "Shipment Complete".
    ShippingProcessorJava -> ShippingDBJava : 8. Update Order Status ("Shipment Complete")
    activate ShippingDBJava

    ' 9. The system reduces the stock quantity of the shipped goods.
    ShippingProcessorJava -> InventoryManagerJava : 9. Decrease Stock Quantity (Shipped Amount)
    InventoryManagerJava --> ShippingProcessorJava : Decrease Complete
    deactivate InventoryManagerJava

    ' 10. The system automatically sends a shipping completion email including the tracking number to the customer.
    ShippingProcessorJava -> MailServiceJava : 10. Send Shipping Complete Email (Tracking Number)
    activate MailServiceJava
    MailServiceJava --> ShippingProcessorJava : Send Complete
    deactivate MailServiceJava

    ShippingDBJava --> ShippingProcessorJava : Update Complete
    deactivate ShippingDBJava
    
    ' Post-condition: Update screen display and return to list.
    deactivate ShippingProcessorJava
    ShippingInstructionJSP --> LogisticsStaff : Processing Complete Notification
    deactivate ShippingInstructionJSP

end ' Close Alternative Flow 2 alt
end ' Close Alternative Flow 1 alt

@enduml
