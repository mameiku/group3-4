@startuml BBShop_DomainModel_English
skinparam handwritten false
skinparam classAttributeIconSize 0
skinparam defaultFontName "メイリオ"

' ====================================================================
' 1. クラス定義 (Core Entities)
' ====================================================================

class Customer {
    - customerId: int
    - email: String
    - password: String
    - name: String
    - phone: String
    - address: String
    - creditCardInfo: String
    --
    + login(email: String, password: String): boolean
    + register(): void
    + searchProducts(keyword: String): List<Product>
    + postReview(productId: int): void
}

class Product {
    - productId: int
    - name: String
    - price: Decimal
    - stock: int
    - description: String
    --
    + checkStock(quantity: int): boolean
    + showDetails(): void
}

class Order {
    - orderId: int
    - customerId: int
    - orderDate: DateTime
    - status: String
    - totalAmount: Decimal
    - shippingAddress: String
    --
    + finalizeOrder(): void
    + cancelOrder(): void
}

class OrderItem {
    - orderItemId: int
    - orderId: int
    - productId: int
    - quantity: int
    - purchasePrice: Decimal
    --
    + calculateSubtotal(): Decimal
}

' ====================================================================
' 2. サポートクラス定義 (Support Entities)
' ====================================================================

class Administrator {
    - adminId: String
    - name: String
    - password: String
    --
    + createAccount(): void
    + updateInfo(): void
    + login(): void
    + logout(): void
    + deactivateAccount(): void
}

class Review {
    - reviewId: int
    - customerId: int
    - productId: int
    - rating: int
    - comment: String
    - postedDate: DateTime
    --
    + edit(): void
}

class Payment {
    - paymentId: int
    - orderId: int
    - method: String
    - status: String
    --
    + processPayment(): boolean
    + processRefund(): boolean
}

class Shipping {
    - shippingId: int
    - orderId: int
    - status: String
    - trackingNumber: String
    - shippingAddress: String
    --
    + processShipping(): void
    + registerTrackingNumber(number: String): void
}

class Return {
    - returnId: int
    - orderId: int
    - reason: String
    - status: String
    - refundStatus: String
    --
    + processReturn(): void
}

' ====================================================================
' 3. クラス配置の指示 (Layout Hints for better visual flow)
' ====================================================================

Product -down-> Order : visual adjustment
OrderItem -left-> Order : visual adjustment
Review -right-> Product : visual adjustment

' ====================================================================
' 4. 関連定義 (Associations)
' ====================================================================

' Order Flow Associations
Customer "1" o-- "*" Order : places
Order "1" *-- "1..*" OrderItem : includes

' Product and Review Associations
OrderItem "*" -> "1" Product : refersTo
Customer "1" o-- "*" Review : posts
Product "1" o-- "*" Review : has

' Payment, Shipping, and Return Associations
Order "1" -> "1" Payment : handles
Order "1" -> "1" Shipping : manages
Order "1" o-- "0..1" Return : isReturned

' Administrator class stands independently (no domain associations)

@enduml
